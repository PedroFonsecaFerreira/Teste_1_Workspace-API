const Workspace = function (e) { "use strict"; const n = "Trimble.dispatcher.v1", t = {}, i = {}; let o = 1; function r(e) { const n = a(); return i[n] = e, () => delete i[n] } function s(e, i, o, r, s = 5e3) { return new Promise((c, u) => { const l = a(), m = { scope: n, type: "request", id: l, api: o, args: r }; let f; s > 0 && (f = setTimeout(() => { delete t[l], u(new Error("Operation timed out.")) }, s)), t[l] = e => { delete t[l], f && clearTimeout(f), e.error ? u(e.error) : c(e.result) }, e.postMessage(m, i) }) } function c(e) { return !!e && e.scope === n } function a() { return o++ } window.__TRIMBLE_DispatcherListening__ || (window.__TRIMBLE_DispatcherListening__ = !0, window.addEventListener("message", async e => { const o = e.source, r = "null" === e.origin ? "*" : e.origin, s = e.data; if (function (e) { return c(e) && "event" === e.type }(s)) for (const e in i) { if (!i.hasOwnProperty(e)) continue; const n = i[e].event; n && n(o, r, s.event, s.data) } else if (function (e) { return c(e) && "request" === e.type }(s)) { let e; for (const t in i) { if (!i.hasOwnProperty(t)) continue; const c = i[t].request; if (c && !e) { const t = c(o, r, s.api, s.args); if (void 0 !== t) try { e = { scope: n, type: "response", id: s.id, api: s.api, result: await t } } catch (t) { e = { scope: n, type: "response", id: s.id, api: s.api, error: String(t) } } } } e || (e = { scope: n, type: "response", id: s.id, api: s.api, error: "Not supported" }), o.postMessage(e, r) } else if (function (e) { return c(e) && "response" === e.type }(s)) { const e = t[s.id]; e && e(s) } })); const u = {}; !function (e) { if (u[e]) return u[e]; const n = {}, t = { debug: "#7f8c8d", log: "#2ecc71", warn: "#f39c12", error: "#c0392b" }, i = (n, ...i) => { const o = [`%c${e}`, [`border: 1px solid ${t[n]}`, "border-radius: 0.5em", `color: ${t[n]}`, "font-weight: bold", "padding: 2px 0.5em"].join(";")]; console[n](...o, ...i) }; for (const e of Object.keys(t)) n[e] = (...n) => i(e, ...n); u[e] = n }("App"); const l = {}, m = [], f = new Promise(e => { }); function p(e, n, t) { const i = {}; for (const r in e) { const s = e[r]; if ((void 0 !== t || "onConnect" !== r && "onRequest" !== r) && s) if ("object" == typeof s) { var o = t && t + "." + String(r) || String(r); i[r] = p(s, n, o) } else i[r] = n(r, e[r], t) } return i } r({ request: (e, n, t, i) => { if (".connect_api_client_v1" === t) return f.then(() => { let t = m.find(n => n.dispatcher === e); var i; return t ? t.origin = n : (t = { dispatcher: e, origin: n }, m.push(t)), (i = l) && "function" == typeof i.onConnect && l.onConnect(t), p(l, (e, n) => "function" == typeof n ? ".api_function_v1" : n) }); { const r = m.find(t => t.dispatcher === e && t.origin === n); if (r) { if ((o = l) && "function" == typeof o.onRequest) { const e = l.onRequest(r, t, i); if (void 0 !== e) return e } const e = function (e, n) { const t = n.split("."); let i = e; for (const e of t) i = "object" == typeof i && i && e in i ? i[e] : void 0; return i }(l, t); if ("function" == typeof e) { const n = e.apply(void 0, i); return void 0 === n ? Promise.resolve(n) : n } return Promise.resolve(e) } return } var o } }); const y = { ft: { inMillimeters: 304.8, symbol: "ft" }, in: { inMillimeters: 25.4, symbol: "in" }, yd: { inMillimeters: 914.4, symbol: "yd" }, mi: { inMillimeters: 1609344, symbol: "mi" } }; Object.assign(Object.assign({}, { mm: { inMillimeters: 1, symbol: "mm" }, cm: { inMillimeters: 10, symbol: "cm" }, m: { inMillimeters: 1e3, symbol: "m" }, km: { inMillimeters: 1e6, symbol: "km" } }), y), Object.assign(Object.assign({}, { mm2: { inSquareMeters: 1e-6, symbol: "mmÂ²" }, cm2: { inSquareMeters: 1e-4, symbol: "cmÂ²" }, m2: { inSquareMeters: 1, symbol: "mÂ²" }, km2: { inSquareMeters: 1e6, symbol: "kmÂ²" } }), { ft2: { inSquareMeters: .09290304, symbol: "ftÂ²" }, in2: { inSquareMeters: 64516e-8, symbol: "inÂ²" }, yd2: { inSquareMeters: .83612736, symbol: "ydÂ²" } }), Object.assign(Object.assign({}, { mm3: { inCubicMeters: 1e-9, symbol: "mmÂ³" }, cm3: { inCubicMeters: 1e-6, symbol: "cmÂ³" }, m3: { inCubicMeters: 1, symbol: "mÂ³" }, km3: { inCubicMeters: 1e9, symbol: "kmÂ³" } }), { ft3: { inCubicMeters: .028316846592, symbol: "ftÂ³" }, in3: { inCubicMeters: 16387064e-12, symbol: "inÂ³" }, yd3: { inCubicMeters: .764554857984, symbol: "ydÂ³" }, l: { inCubicMeters: .001, symbol: "l" }, gal: { inCubicMeters: .003785411784, symbol: "gal" } }), Object.assign(Object.assign({}, { t: { inKilograms: 1e3, symbol: "t" }, mg: { inKilograms: 1e-6, symbol: "mg" }, g: { inKilograms: .001, symbol: "g" }, kg: { inKilograms: 1, symbol: "kg" } }), { lb: { inKilograms: .45359237, symbol: "lb" }, "sh tn": { inKilograms: 907.18474, symbol: "sh tn" }, oz: { inKilograms: .028349523125, symbol: "oz" }, ton: { inKilograms: 1e3, symbol: "ton" } }); var b; return (b = e.PropertyType || (e.PropertyType = {}))[b.LengthMeasure = 0] = "LengthMeasure", b[b.AreaMeasure = 1] = "AreaMeasure", b[b.VolumeMeasure = 2] = "VolumeMeasure", b[b.MassMeasure = 3] = "MassMeasure", b[b.AngleMeasure = 4] = "AngleMeasure", b[b.StringValue = 5] = "StringValue", b[b.IntValue = 6] = "IntValue", b[b.DoubleValue = 7] = "DoubleValue", b[b.DateTime = 8] = "DateTime", b[b.Logical = 9] = "Logical", b[b.Boolean = 10] = "Boolean", e.connect = function (e, n, t) { return function (e, n, t = 1e4) { async function i(e, n) { const i = await s(e, n, ".connect_api_client_v1", [], 0); if (i && "object" == typeof i) { return p(i, (i, o, r) => { if (".api_function_v1" === o) { const o = r ? r + "." + String(i) : String(i); return (...i) => s(e, n, o, i, t) } return o }) } throw new Error("Failed to connect") } function o(e) { if (!e) return "*"; try { return new URL(e).origin } catch (e) { return "*" } } if (n && r({ event: (e, t, i, o) => n(i, o) }), e === window) return Promise.resolve(l); if ((c = e) && "function" == typeof c.postMessage) return i(e, "*"); if (function (e) { return e && "object" == typeof e.contentWindow }(e)) { const n = []; return n.push(new Promise((n, t) => { const r = async () => { e.removeEventListener("load", r), e.contentWindow ? n(await i(e.contentWindow, o(e.src))) : t(new Error("Cannot access the target content window")) }; e.addEventListener("load", r) })), e.contentWindow && n.push(i(e.contentWindow, o(e.src))), Promise.race(n) } return Promise.reject(new Error("Target must be a window or an iframe")); var c }(e, n, t) }, e }({});
